Language="VBSCRIPT"

Sub GetProductInertia(MeasuredProduct)
    Dim PrincipalAxes(15)
    Set ProductInertia = MeasuredProduct.ReferenceProduct.GetTechnologicalObject("Inertia")
    ProductInertia.GetPrincipalAxes PrincipalAxes

    For i = 0 To 14
        MsgBox PrincipalAxes(i) & "  as: " & TypeName(PrincipalAxes(i))
        Next

End Sub

Dim mainDirectory as String

Dim dataPath As String

Dim fileName as String
Dim dotIndex As Integer
Dim fileLeaf As String
Dim dataExtension As String

Dim catDest As String
Dim stpDest As String
Dim igsDest As String
Dim igsPath As String
Dim stpPath As String
Dim photosPath As String
Dim translateIgsPath As Stringx
Dim translateStpPath As String
Dim translateCatPath As String

Dim catPath as String
Dim myExcel As Microsoft.Office.Interop.Excel.Application

Dim translateDirectory As String
Dim suppliedDirectory As String
Dim photosDirectory As String
Dim iRow As Integer
Dim objFSO As Object
Dim oFolder As Object
Dim Filter(1)
Dim theHSF As HybridShapeTypeLib.HybridShapeFactory
Dim theObjectRef As Object
Dim mins(2) As Object
Dim maxs(2) As Object
Dim originCoord(2) As Object
Dim XAxisCoord(2) As Object
Dim YAxisCoord(2) As Object
Dim ZAxisCoord(2) As Object
Dim aPoint As Object
Dim theEXRef As Object
Dim dCoords(2) As Object
Dim dResult(2) As Object
Dim ii, j As Short
Dim theXDir As Object
Dim theyDir As Object
Dim theZDir As Object
Dim theExtremums(5)
Dim body As body


Sub CATMain()

    MsgBox TypeName(CATIA.ActiveDocument)

    Return

    CATIA.DisplayFileAlerts = False

    ' Dim mainDirectory as String
    mainDirectory = "C:\Estimating\Project_Estimating"

    Set objFSO = Createobject("Scripting.FileSystemObject")



    translateDirectory = mainDirectory & "\TSG - Translated Data"

    suppliedDirectory = mainDirectory & "\Supplied Cad Data"

    photosDirectory = mainDirectory & "\Photos"



    objFSO.CreateFolder(translateDirectory)
    objFSO.CreateFolder(suppliedDirectory)
    objFSO.CreateFolder(photosDirectory)
    objFSO.CopyFile "C:\Catia\Project_Estimating\CAD Info.xlsx", mainDirectory & "\CAD Info.xlsx"





    Set myExcel = CreateObject("Excel.Application")

    myExcel.Workbooks.Open(mainDirectory & "\CAD Info.xlsx")

    Set myWorksheet = myExcel.Workbooks.Item(1).ActiveSheet

    myExcel.Workbooks.Item(1).ActiveSheet.Columns("B:B").ColumnWidth = 20


    iRow = 2

    Set oFolder = objFSO.GetFolder(mainDirectory)


    Process()
    Process()

    myExcel.Workbooks.Item(1).Save()
    myExcel.Quit()
    myExcel.Quit()

End Sub

Sub Process()
    For Each oFile in oFolder.Files


        dataPath = oFile

        fileName = LCase(oFile.Name)

        dotIndex = InStrRev(fileName,".")

        fileLeaf = LCase(Left(fileName,dotIndex - 1))

        dataExtension = LCase(Mid(fileName, dotIndex))

        If dataExtension = ".iges" Then
            dataExtension = ".igs"

            dataPath = mainDirectory & "\" & fileLeaf & ".igs"

            objFSO.MoveFile oFile, dataPath
        End If



        catPath = mainDirectory & "\" & fileLeaf & ".catpart"

        igsPath = mainDirectory & "\" & fileLeaf & ".igs"

        stpPath = mainDirectory & "\" & fileLeaf & ".stp"

        photosPath = photosDirectory & "\" & fileLeaf & ".bmp"

        suppliedDataPath = suppliedDirectory & "\" & fileLeaf & dataExtension

        translateIgsPath = translateDirectory & "\" & fileLeaf & ".igs"

        translateStpPath = translateDirectory & "\" & fileLeaf & ".stp"

        translateCatPath = translateDirectory & "\" & fileLeaf & ".catpart"




        If dataExtension = ".catpart" Or dataExtension = ".igs" Or dataExtension = ".stp" Or dataExtension = ".step"  Then

            CATIA.Documents.Open(dataPath)

            CATIA.ActiveWindow.ActiveViewer.Reframe

        End If

        If dataExtension = ".stp" Or dataExtension = ".step" Then

            CATIA.ActiveDocument.SaveAs mainDirectory & "\" & fileLeaf & ".CATPart"

            CATIA.ActiveDocument.ExportData mainDirectory & "\" & fileLeaf & ".igs", "igs"

            stpDest = suppliedDataPath

            catDest = translateCatPath

            igsDest = translateIgsPath

        End If

        If dataExtension = ".igs" Then

            CATIA.ActiveDocument.SaveAs mainDirectory & "\" & fileLeaf & ".CATPart"

            CATIA.ActiveDocument.ExportData mainDirectory & "\" & fileLeaf & ".stp", "stp"

            stpDest = translateStpPath

            catDest = translateCatPath

            igsDest = suppliedDataPath

        End If

        If dataExtension = ".catpart" Then

            CATIA.ActiveDocument.ExportData mainDirectory & "\" & fileLeaf & ".igs" , "igs"

            CATIA.ActiveDocument.ExportData mainDirectory & "\" & fileLeaf & ".stp", "stp"

            stpDest = translateStpPath

            catDest = suppliedDataPath

            igsDest = translateIgsPath

        End If

        If dataExtension = ".catpart" Or dataExtension = ".igs" Or dataExtension = ".stp" Or dataExtension = ".step" Then


            ' myProductDoc =
            ' MsgBox CATIA.ActiveDocument.name
            ' myPart = myProductDoc.Part
            ' myPart.Update()

            ' For i = 0 To myPart.Bodies.Count
            '     MsgBox "Body: " & i
            '     Next

            Dim oSel as Selection
            Set oSel = CATIA.ActiveDocument.selection

            oSel.Clear()

            ' Dim F_Body as object


            Filter(0)="Body"
            Filter(1)="HybridBody"

            ' F_Body =

            ' oSel.SelectElement3(Filter, "Select the Part Bodys or GeoSets, then select the green ball to end the selection.", False, INFITF.CATMultiSelectionMode.CATMultiSelTriggWhenUserValidatesSelection, False)

            F_Body = oSel.selectelement2(Filter, " Select Body in which you want to add", False)

            ' MsgBox F_Body

            If F_Body = "Normal" Then

                CATIA.ActiveWindow.ActiveViewer.CaptureToFile catCaptureFormatBMP, photosPath

                Dim part As Part
                Set part = CATIA.ActiveDocument

                Dim myBodyPart As Part

                If TypeName(CATIA.ActiveDocument) = "PartDocument" Then
                    Set part = CATIA.ActiveDocument.Part

                Else
                    Set part = CATIA.ActiveDocument

                End If


                Set myBodyPart = part


                ' MsgBox TypeName(oSel.Item(1))

                If TypeName(oSel.Item(1)) = "SelectedElement" Then
                    Set body = oSel.Item(1).Value

                    '     Set theHSF = CATIA.ActiveDocument.Part.HybridShapeFactory
                    ' Else
                    '     Set theHSF = CATIA.ActiveDocument.HybridShapeFactory
                End If

                ' MsgBox TypeName(body.Value)

                ' If TypeName(CATIA.ActiveDocument) = "PartDocument" Then

                Set theHSF = myBodyPart.HybridShapeFactory
                ' Else
                '     Set theHSF = CATIA.ActiveDocument.HybridShapeFactory
                ' End If

                ' MsgBox TypeName(body)
                ' If TypeName(CATIA.ActiveDocument) = "PartDocument" Then

                If TypeName(body) = "HybridBody" Then

                    Set theObjectRef = myBodyPart.CreateReferenceFromObject(body.HybridShapes.Item(1))
                Else
                    Set theObjectRef = myBodyPart.CreateReferenceFromObject(body)
                End If
                ' Else
                '     Set theObjectRef = CATIA.ActiveDocument.CreateReferenceFromObject(body)
                ' End If

                ' Set theObjectRef = myBodyPart.CreateReferenceFromObject(body)

                ' Initialize the mins,maxs to impossible values

                mins(0) = 100000
                mins(1) = 100000
                mins(2) = 100000
                maxs(0) = -100000
                maxs(1) = -100000
                maxs(2) = -100000

                ' Add a temporary body for points (TEMP body can be deleted)
                ' Dim tempBody As Object
                ' Set tempBody = body
                ' tempBody.Name = "TEMP"

                ' MsgBox TypeName(body)

                ' Evalute the Axis System Directions
                originCoord(0) = 0
                originCoord(1) = 0
                originCoord(2) = 0


                XAxisCoord(0) = 1
                XAxisCoord(1) = 0
                XAxisCoord(2) = 0

                YAxisCoord(0) = 0
                YAxisCoord(1) = 1
                YAxisCoord(2) = 0


                ZAxisCoord(0) = 0
                ZAxisCoord(1) = 0
                ZAxisCoord(2) = 1

                ' Make directions for X Y and Z

                Set theXDir = theHSF.AddNewDirectionByCoord(originCoord(0) - XAxisCoord(0), originCoord(1) - XAxisCoord(1), originCoord(2) - XAxisCoord(2))

                Set theYDir = theHSF.AddNewDirectionByCoord(originCoord(0) - YAxisCoord(0), originCoord(1) - YAxisCoord(1), originCoord(2) - YAxisCoord(2))

                Set theZDir = theHSF.AddNewDirectionByCoord(originCoord(0) - ZAxisCoord(0), originCoord(1) - ZAxisCoord(1), originCoord(2) - ZAxisCoord(2))

                ' MsgBox TypeName(theObjectRef)

                ' Construct some extremums and check the coordinates against the mins/maxs
                Set theExtremums(0) =theHSF.AddNewExtremum(theObjectRef, theXDir, 1)
                theExtremums(0).Direction2 = theYDir
                theExtremums(0).ExtremumType2 = 1
                theExtremums(0).Direction3 = theZDir
                theExtremums(0).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(0))
                Set theExtremums(1) = theHSF.AddNewExtremum(theObjectRef, theXDir, 0)
                theExtremums(1).Direction2 = theYDir
                theExtremums(1).ExtremumType2 = 1
                theExtremums(1).Direction3 = theZDir
                theExtremums(1).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(1))
                Set theExtremums(2) = theHSF.AddNewExtremum(theObjectRef, theYDir, 1)
                theExtremums(2).Direction2 = theZDir
                theExtremums(2).ExtremumType2 = 1
                theExtremums(2).Direction3 = theXDir
                theExtremums(2).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(2))
                Set theExtremums(3) = theHSF.AddNewExtremum(theObjectRef, theYDir, 0)
                theExtremums(3).Direction2 = theZDir
                theExtremums(3).ExtremumType2 = 1
                theExtremums(3).Direction3 = theXDir
                theExtremums(3).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(3))
                Set theExtremums(4) = theHSF.AddNewExtremum(theObjectRef, theZDir, 1)
                theExtremums(4).Direction2 = theXDir
                theExtremums(4).ExtremumType2 = 1
                theExtremums(4).Direction3 = theYDir
                theExtremums(4).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(4))
                Set theExtremums(5) = theHSF.AddNewExtremum(theObjectRef, theZDir, 0)
                theExtremums(5).Direction2 = theXDir
                theExtremums(5).ExtremumType2 = 1
                theExtremums(5).Direction3 = theYDir
                theExtremums(5).ExtremumType3 = 1
                myBodyPart.UpdateObject(theExtremums(5))


                For ii = 0 To 5
                    Set theEXRef = myBodyPart.CreateReferenceFromObject(theExtremums(ii))
                    Set aPoint = theHSF.AddNewPointDatum(theEXRef)
                    aPoint.Compute()
                    aPoint.GetCoordinates(dCoords)
                    For j = 0 To 2
                        If dCoords(j) < mins(j) Then
                            mins(j) = dCoords(j)
                        End If
                        If dCoords(j) > maxs(j) Then
                            maxs(j) = dCoords(j)
                        End If
                        Next
                        Next

                        ' Find Distance in X, Y, and Z and Convert to Inches

                        sXLength = FormatNumber(Int((((maxs(0) - mins(0)) / 25.4) + 0.125) / 0.125) * 0.125, 3)
                        sYLength = FormatNumber(Int((((maxs(1) - mins(1)) / 25.4) + 0.125) / 0.125) * 0.125, 3)
                        sZLength = FormatNumber(Int((((maxs(2) - mins(2)) / 25.4) + 0.125) / 0.125) * 0.125, 3)




                        FillOut  fileName, fileLeaf, sXLength, sYLength, sZLength

                        AddPicture  photosPath

                        iRow = iRow + 1

                        If objFSO.FileExists(mainDirectory & "\" & fileLeaf & ".stp") Then
                            objFSO.MoveFile  mainDirectory & "\" & fileLeaf & ".stp", stpDest
                        End If

                        If objFSO.FileExists(mainDirectory & "\" & fileLeaf & ".step") Then
                            objFSO.MoveFile  mainDirectory & "\" & fileLeaf & ".step", stpDest
                        End If

                        If objFSO.FileExists(mainDirectory & "\" & fileLeaf & ".catpart") Then
                            objFSO.MoveFile  mainDirectory & "\" & fileLeaf & ".catpart", catDest
                        End If

                        If objFSO.FileExists(mainDirectory & "\" & fileLeaf & ".igs") Then
                            objFSO.MoveFile  mainDirectory & "\" & fileLeaf & ".igs", igsDest
                        End If

                    End If

                    CATIA.ActiveWindow.Close()
                End If

                Next
End Sub


Sub FillOut( fileName As String, fileLeaf As String, length As Integer, width As Integer, height As Integer)


    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 18).RowHeight = 80

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 18).Value = fileLeaf & ".bmp"

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 18).Value = fileLeaf & ".bmp"

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 1).Value = iRow - 1

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 3).Value = fileName

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 4).Value = fileLeaf

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 6).Value = length

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 7).Value = width

    myExcel.Workbooks.Item(1).ActiveSheet.Cells(iRow, 8).Value = height
End Sub


Sub AddPicture(photosPath As String)

    Set oPicture = myExcel.ActiveSheet.Shapes.AddPicture(photosPath, False, True, 1, 1, 100, 75)
    With oPicture
        .Left = myExcel.ActiveSheet.Cells(iRow, 2).Left
        .Top = myExcel.ActiveSheet.Cells(iRow, 2).Top
        .Placement = 1
    End With

End Sub